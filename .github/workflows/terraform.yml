name: Infrastructure

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_WORKING_DIR: ./terraform  # Verzeichnis mit Terraform-Konfigurationsdateien

jobs:

  provision_infrastructure:
    runs-on: ubuntu-latest

    steps:

      # Set AWS credentials for Terraform (using the official AWS Action)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      # Terraform fmt (Formatierung √ºberpr√ºfen)
      - name: Terraform fmt
        id: fmt
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check
        continue-on-error: true  # Fehler hier sind nicht kritisch

      # Terraform init (Initialisierung)
      - name: Terraform Init
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      # Terraform validate (Validierung der Konfiguration)
      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate -no-color

      # Terraform plan (Plan erstellen)
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color

      # Apply Terraform Plan
      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      # Kommentar f√ºr Pull Requests erstellen (nur f√ºr Pull Requests)
      - name: Post Plan Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Terraform Format and Style üñå: \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è: \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ: \`${{ steps.validate.outcome }}\`

            <details><summary>Terraform Plan üìñ</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
