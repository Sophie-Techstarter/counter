name: Dockerize, Deploy, and Provision AWS Infrastructure

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_WORKING_DIR: ./terraform  # Verzeichnis mit Terraform-Konfigurationsdateien

jobs:
  dockerize:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js for building the React app
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push the Docker image to Docker Hub
      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .  # Dockerfile befindet sich im Root-Verzeichnis
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/counter:latest

  provision_infrastructure:
    runs-on: ubuntu-latest
    needs: dockerize  # Führt Terraform erst aus, nachdem der Docker-Job erfolgreich war

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      # Terraform fmt (Formatierung überprüfen)
      - name: Terraform fmt
        id: fmt
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check
        continue-on-error: true  # Fehler hier sind nicht kritisch

      # Terraform init (Initialisierung)
      - name: Terraform Init
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      # Terraform validate (Validierung der Konfiguration)
      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate -no-color

      # Terraform plan (Plan erstellen)
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color

        # Set AWS credentials for Terraform
      - name: Set AWS Credentials
        run: |
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      # Kommentar für Pull Requests erstellen (nur für Pull Requests)
      - name: Post Plan Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Terraform Format and Style 🖌: \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️: \`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖: \`${{ steps.validate.outcome }}\`

            <details><summary>Terraform Plan 📖</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
