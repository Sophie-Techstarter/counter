name: Deployment Workflow

on:
  push:
    branches:
      - main 
  workflow_dispatch: 


jobs:
  Docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/counter:${{ github.sha }}

  Terraform-Apply:
    runs-on: ubuntu-latest 
    needs: Docker
    if: github.event_name == 'push'  

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Ansible installieren
        run: sudo apt-get install -y ansible

      - name: Generiere Ansible Inventory
        working-directory: ./terraform
        run: |
          echo "[webserver]" >> ../ansible/inventory.ini
          cat ../ansible/inventory.ini
          terraform output -json >> meineOutputs.json
          if [ -s meineOutputs.json ]; then
          jq -r ".public_ips.value[]" meineOutputs.json >> ../ansible/inventory.ini
          cat ../ansible/inventory.ini
          else
            echo "Terraform outputs are empty or invalid."
          fi

      - name: SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/windows-pair.pem
          chmod 600 ~/.ssh/windows-pair.pem


      - name: Ansible Playbook ausf√ºhren
        working-directory: ./ansible
        run: ansible-playbook -i inventory.ini mein-playbook.yml --ssh-common-args='-o StrictHostKeyChecking=no' -v

  Terraform_destroy:
    name: "Terraform_destroy"
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} 

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
    
      - name: Terraform Refresh
        working-directory: ./terraform
        run: terraform refresh

      - name: Terraform Plan (Destroy)
        working-directory: ./terraform
        run: terraform plan -destroy

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve
