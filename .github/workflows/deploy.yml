name: CI


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]



env:
  AWS_REGION: "eu-central-1"                        
  ECR_REPOSITORY: "my-ecr-repo"                  
  ECS_SERVICE: "Cluster_service"             
  ECS_CLUSTER: "Cluster_counter"               
  ECS_TASK_DEFINITION: ".aws/task-definition.json" 
  CONTAINER_NAME: "my-container"                 


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 22

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test -- --watchAll=false

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
     
    - name: Build Docker image
      run: |
        docker build \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/my-react-app:${{ github.sha }} \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/my-react-app:latest \
          .
     
    - name: Push Docker image
      run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-react-app:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-react-app:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} 
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
